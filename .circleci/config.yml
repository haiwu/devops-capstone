version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@0.12.0
  docker: circleci/docker@1.6.0
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: haiwu/nginx-hello-world
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-image:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG
  create-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          AWS EKS cluster name
        type: string
    steps:
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          node-type: 't2.micro'
          nodes: 2
          show-eksctl-command: true
          zones: 'us-east-1a,us-east-1b,us-east-1c'
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          AWS EKS cluster name
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test AWS EKS cluster
          command: |
            kubectl get services
            kubectl get pods -l app=hello-world
            kubectl get deployments
  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          AWS EKS cluster name
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: nginx-deployment.yml
          resource-name: deployment/haiwu-nginx-hello-world-deployment
workflows:
  devops-captone:
    jobs:
      - docker/hadolint:
          dockerfiles: Dockerfile
          executor-class: small
          trusted-registries: 'docker.io'
      - build:
          requires:
            - docker/hadolint
      - publish-image:
          requires:
            - build
      - create-cluster:
          cluster-name: haiwu-helloworld-eks
          requires:
            - publish-image
      - create-deployment:
          cluster-name: haiwu-helloworld-eks
          requires:
            - create-cluster
      - test-cluster:
          cluster-name: haiwu-helloworld-eks
          requires:
            - create-deployment
      - aws-eks/update-container-image:
          cluster-name: haiwu-helloworld-eks
          container-image-updates: 'nginx-hello-world=nginx-hello-world:latest'
          record: true
          requires:
            - create-deployment
          resource-name: deployment/haiwu-nginx-hello-world-deployment
#      - aws-eks/delete-cluster:
#          cluster-name: my-eks-demo
#          requires:
#            - test-cluster            

